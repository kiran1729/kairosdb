// Automatically generated by MockGen. DO NOT EDIT!
// Source: src/zerostackinc/kairosdb/client.go

package kairosdb

import (
  gomock "github.com/golang/mock/gomock"
  io "io"
  time "time"
)

// Mock of Client interface
type MockClient struct {
  ctrl     *gomock.Controller
  recorder *_MockClientRecorder
}

// Recorder for MockClient (not exported)
type _MockClientRecorder struct {
  mock *MockClient
}

func NewMockClient(ctrl *gomock.Controller) *MockClient {
  mock := &MockClient{ctrl: ctrl}
  mock.recorder = &_MockClientRecorder{mock}
  return mock
}

func (_m *MockClient) EXPECT() *_MockClientRecorder {
  return _m.recorder
}

func (_m *MockClient) PushMetrics(metrics []*Metric, timeout time.Duration) error {
  ret := _m.ctrl.Call(_m, "PushMetrics", metrics, timeout)
  ret0, _ := ret[0].(error)
  return ret0
}

func (_mr *_MockClientRecorder) PushMetrics(arg0, arg1 interface{}) *gomock.Call {
  return _mr.mock.ctrl.RecordCall(_mr.mock, "PushMetrics", arg0, arg1)
}

func (_m *MockClient) Metrics(timeout time.Duration) ([]string, error) {
  ret := _m.ctrl.Call(_m, "Metrics", timeout)
  ret0, _ := ret[0].([]string)
  ret1, _ := ret[1].(error)
  return ret0, ret1
}

func (_mr *_MockClientRecorder) Metrics(arg0 interface{}) *gomock.Call {
  return _mr.mock.ctrl.RecordCall(_mr.mock, "Metrics", arg0)
}

func (_m *MockClient) Delete(query *Query, timeout time.Duration) error {
  ret := _m.ctrl.Call(_m, "Delete", query, timeout)
  ret0, _ := ret[0].(error)
  return ret0
}

func (_mr *_MockClientRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
  return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

func (_m *MockClient) Query(query *Query, timeout time.Duration) (*QueryResponse, error) {
  ret := _m.ctrl.Call(_m, "Query", query, timeout)
  ret0, _ := ret[0].(*QueryResponse)
  ret1, _ := ret[1].(error)
  return ret0, ret1
}

func (_mr *_MockClientRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
  return _mr.mock.ctrl.RecordCall(_mr.mock, "Query", arg0, arg1)
}

// Mock of Backend interface
type MockBackend struct {
  ctrl     *gomock.Controller
  recorder *_MockBackendRecorder
}

// Recorder for MockBackend (not exported)
type _MockBackendRecorder struct {
  mock *MockBackend
}

func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
  mock := &MockBackend{ctrl: ctrl}
  mock.recorder = &_MockBackendRecorder{mock}
  return mock
}

func (_m *MockBackend) EXPECT() *_MockBackendRecorder {
  return _m.recorder
}

func (_m *MockBackend) Call(method string, url string, r io.Reader, timeout time.Duration, expStatus int, resp interface{}) error {
  ret := _m.ctrl.Call(_m, "Call", method, url, r, timeout, expStatus, resp)
  ret0, _ := ret[0].(error)
  return ret0
}

func (_mr *_MockBackendRecorder) Call(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
  return _mr.mock.ctrl.RecordCall(_mr.mock, "Call", arg0, arg1, arg2, arg3, arg4, arg5)
}
